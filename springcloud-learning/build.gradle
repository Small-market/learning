// 针对多模块 打包的策略
buildscript {
    // 自定义参数
    ext {
        // 具体版本依赖可以去 https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E 找相应的版本
        springBootVersion = '2.3.12.RELEASE'
        springCloudVersion = 'Hoxton.SR12'
        springCloudAlibabaVersion = "2.2.7.RELEASE"
        // 依赖包
        hutoolVersion = '5.7.2'
    }

    // 项目仓库设置
    repositories {
        // 优先使用本地 mavene 仓库
        mavenLocal()
        // 阿里云 central 仓和 jcenter 仓的聚合仓
        maven { url 'https://maven.aliyun.com/repository/public/' }
        // 阿里云 gradle 插件仓库
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        // 阿里云 spring 代理仓库
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        // 中央maven仓库
        jcenter()
        mavenCentral()
    }

    // springboot gradle 打包插件依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

//描述
description 'springcloud 学习'

// 所有项目配置
allprojects {
    // gradle插件
    //  Java的gradle插件
    apply plugin: 'java'
    // maven发布的gradle插件
    // apply plugin: 'maven-publish'
    // idea 扩展插件
    apply plugin: 'idea'
    // java增强
    apply plugin: 'java-library'

    // 定义您的源文件应该被视为哪种语言版本的 Java。
    sourceCompatibility = '1.8'
    // 定义您的代码应该运行的最低 JVM 版本，即它确定编译器生成的字节码版本。
    targetCompatibility = '1.8'

    // 项目信息
    group = 'com.gavin'
    // 版本
    version = '0.0.1-SNAPSHOT'

    // 项目仓库设置
    repositories {
        // 优先使用本地 mavene 仓库
        mavenLocal()
        // 阿里云 central 仓和 jcenter 仓的聚合仓
        maven { url 'https://maven.aliyun.com/repository/public/' }
        // 阿里云 gradle 插件仓库
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        // 阿里云 spring 代理仓库
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        // 中央maven仓库
        jcenter()
        mavenCentral()
    }

    // 指定编码格式 第一种方法
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // 指定编码格式 第二种方法
    // [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    // 依赖范围配置修改
    configurations {
        // 修改annotationProcessor 使其可以继承
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

}

// 子项目设置
subprojects {
    // springboot插件
    apply plugin: 'org.springframework.boot'
    // spring依赖管理插件
    apply plugin: 'io.spring.dependency-management'

    // 全局依赖
    dependencies {

        // hutool 简化工具集
        implementation "cn.hutool:hutool-core:${hutoolVersion}"

        // 热部署开发工 idea 中使用 Jrebel
        // developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // 注解依赖
        annotationProcessor(
                // 配置文件解析
                'org.springframework.boot:spring-boot-configuration-processor',
                // lombok 简化开发
                'org.projectlombok:lombok'
        )

        // 测试依赖
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    // 子项目管理依赖
    dependencyManagement {
        imports {
            // Spring-Cloud 依赖
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            // Spring-Alibaba 依赖
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
        // 子项目管理依赖
        dependencies {
            dependency "mysql:mysql-connector-java:8.0.25"
            dependency 'com.baomidou:mybatisplus-spring-boot-starter:1.0.5'
        }
    }

    // 测试配置
    test {
        useJUnitPlatform()
    }
}