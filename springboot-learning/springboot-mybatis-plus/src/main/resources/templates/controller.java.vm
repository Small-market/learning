package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
package ${package.Service}.${table.serviceName};
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${swagger})
import io.swagger.annotations.Api;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
#end
import lombok.extern.slf4j.Slf4j;
import lombok.RequiredArgsConstructor;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@RequiredArgsConstructor
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${swagger})
@Api(tags = "$!{table.comment}接口")
#end
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end
        private final ${table.serviceName} baseService;

        @GetMapping
        public R<RPage<${entity}>> list(@RequestParam(value = "pageSize", defaultValue = "5") Long pageSize,
        @RequestParam(value = "pageIndex", defaultValue = "1") Long pageIndex) {
            return R.ok(PageUtil.toPage(sysGeneratorService.page(new Page<>(pageIndex, pageSize))));
        }

        @GetMapping("{id}")
        public R<${entity}> getById(@PathVariable Long id) {
            return R.ok(sysGeneratorService.getById(id));
        }

        @PostMapping
        public R<Boolean> add(${entity} entity) {
            return oper(sysGeneratorService.save(tableEntity));
        }

        @PutMapping
        public R<Boolean> update(${entity} entity) {
            return oper(sysGeneratorService.updateById(tableEntity));
        }

        @Delete("{id}")
        public R<Boolean> del(@PathVariable Long id) {
            return oper(sysGeneratorService.removeById(id));
        }

        private R<Boolean> oper(boolean flag) {
            if (flag) {
                return R.ok();
            }
            return R.fail();
        }
    }

#end